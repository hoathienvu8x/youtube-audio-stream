#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from flask import Flask, request, jsonify, render_template_string
import youtube_dl as ytdl
import re

app = Flask(__name__)

app.config['DEBUG'] = False
app.config['PORT'] = 9600
app.config["JSON_AS_ASCII"] = False
app.config["JSONIFY_PRETTYPRINT_REGULAR"] = False

class SimpleYoutu(ytdl.YoutubeDL):
    def __init__(self, *args, **kargs):
        super(SimpleYoutu, self).__init__(*args, **kargs)
        self.add_default_info_extractors()

def get_mime_type(ext):
    mimes = {
        "m4a":"audio/x-m4a",
        "3gp":"audio/3gpp",
        "3g2":"audio/3gpp2",
        "aiff":"audio/x-aiff",
        "amr":"audio/amr",
        "mp3":"audio/x-mpeg",
        "mp4":"audio/x-mp4",
        "wav":"audio/x-wav",
        "m4b":"audio/x-m4b",
        "m4p":"audio/x-m4p",
        "webm":"audio/webm"
    }
    return mimes.get(ext, None)

def get_videos(url):
    ydl_params = {
        'cachedir': None,
        # 'logger': app.logger.getChild('youtube-dl'),
        'format' : 'bestaudio/best'
    }

    info = SimpleYoutu(ydl_params).extract_info(url, download=False)
    if not isinstance(info,dict) or "formats" not in info or not isinstance(info['formats'],list):
        return {
            'error':'Could not find audio'
        }
    data = None
    for obj in info['formats']:
        if 'url' not in obj or 'ext' not in obj:
            continue

        if 'asr' in obj and not obj['asr']:
            continue

        if not data:
            data = []
        data.append({
            'url':obj['url'],
            'tag':obj['format_id'] if 'format_id' in obj else '0',
            'mimetype':get_mime_type(obj['ext'])
        })

    if not data:
        return {
            'error':'Could not find audio'
        }

    emoji_pattern = re.compile("["
        u"\U0001F600-\U0001F64F"  # emoticons
        u"\U0001F300-\U0001F5FF"  # symbols & pictographs
        u"\U0001F680-\U0001F6FF"  # transport & map symbols
        u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
        u"\U00002500-\U00002BEF"  # chinese char
        u"\U00002702-\U000027B0"
        u"\U00002702-\U000027B0"
        u"\U000024C2-\U0001F251"
        u"\U0001f926-\U0001f937"
        u"\U00010000-\U0010ffff"
        u"\u2640-\u2642" 
        u"\u2600-\u2B55"
        u"\u200d"
        u"\u23cf"
        u"\u23e9"
        u"\u231a"
        u"\ufe0f"  # dingbats
        u"\u3030"
        u"\u2192"
        u"\u00AD"
        "]+", flags=re.UNICODE)

    response = {}
    if 'title' in info:
        response['title'] = emoji_pattern.sub(r'', info['title']).strip()

    if 'description' in info:
        response['description'] = emoji_pattern.sub(r'', info['description']).strip()

    response['formats'] = [ obj for obj in data if obj['mimetype'] ]

    return response

@app.route("/")
def yt_welcome():
    return jsonify(['Hi there'])

@app.route("/fetch", methods=['GET', 'POST'])
def yt_fetch():
    if request.method == "POST":
        req = request.form
    else:
        req = request.args

    video_id = req.get("vid", "").strip()
    if not video_id:
        return jsonify({
            'error':'Invalid video ID'
        })

    youtube_url = "https://www.youtube.com/watch?v={}".format(video_id)
    info = get_videos(youtube_url)
    return jsonify(info)

@app.route("/stream")
def yt_stream():
    video_id = request.args.get('id','').strip()
    return render_template_string('<!doctype html><html><head><link rel="shortcut icon" href="https://www.youtube.com/s/desktop/c3755e48/img/favicon.ico" type="image/x-icon"><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta name="viewport" content="width=device-width, initial-scale=1"><style>* { margin: 0; padding: 0; box-sizing: border-box; } form, audio, h1, div { max-width: 300px; margin: 5% auto; display: block; } form { display: flex; justify-content: space-between; align-items: center; border: 1px solid #ddd; } input, button { padding: 8px; border: none; font-size: medium; font-family: arial,sans-serif; outline: none; } button { background-color: #ddd; }</style><title>Stream Youtube Audio</title></head><body><form spellcheck="false" action="{{ url_for(".yt_fetch") }}" method="get"> <input type="text" name="vid" value="{% if video_id %}{{ video_id }}{% endif %}" placeholder="Video ID" /><button type="submit">Fetch</button></form><script type="text/javascript">document.addEventListener("DOMContentLoaded", function(e) { document.querySelector(\'button[type="submit"]\').addEventListener("click", function(e) { e.preventDefault(); var vid = document.querySelector(\'input[name="vid"]\'); if (!vid) { alert("Opts."); } else { const video_id = vid.value.trim(); if (video_id.length > 0) { var xhttp = new XMLHttpRequest(); xhttp.onload = function() { if (this.readyState == 4 && this.status == 200) { try { var obj = JSON.parse(this.responseText); if(obj.hasOwnProperty("error")) { alert(obj.error); } else { if (!obj.hasOwnProperty("formats")) { alert("Opts"); } else { var audio = document.querySelector("audio#player"); if (!audio) { audio = document.createElement("audio"); audio.id = "player"; audio.controls = true; document.body.appendChild(audio); } audio.querySelectorAll("source").forEach(function(el) { el.remove(); }); obj.formats.forEach(function(el, i, all) { if(audio.canPlayType(el.mimetype)) { var s = document.createElement("source"); s.src = el.url; s.type = el.mimetype; audio.appendChild(s); } if (i == all.length - 1) { if (obj.hasOwnProperty("title")) { var title = document.querySelector("h1#title"); if (!title) { title = document.createElement("h1"); title.id = "title"; document.body.appendChild(title); } title.textContent = obj.title; } if (obj.hasOwnProperty("description")) { var description = document.querySelector("div#description"); if (!description) { description = document.createElement("div"); description.id = "description"; document.body.appendChild(description); } description.textContent = obj.description; } audio.load(); audio.play(); }}); } } } catch (ex) { alert(ex.message); } } else { alert("Opts."); } }; xhttp.open("GET","{{ url_for(".yt_fetch") }}?vid=" + video_id, true); xhttp.send(); } else { alert("Invalid Video ID"); } } return false; }, false);}, false);</script></body></html>', video_id=video_id)

if __name__ == "__main__":
    if app.config["DEBUG"] == False:
        import logging
        log = logging.getLogger('werkzeug')
        log.disabled = True
        app.logger.disabled = True

    app.run('0.0.0.0', port=app.config["PORT"])
